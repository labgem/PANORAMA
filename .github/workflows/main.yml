name: CI

on:
  pull_request:
    branches:
      - '*'
    paths:
      # if any of these files or directory changed, trigger the CI
      # The only case where it is not triggerd is when docs/ is modified
      - 'tests/**'
      - '.github/**'
      - 'panorama/**'
      - 'MANIFEST.in'
      - 'VERSION'
      - 'panorama.yml'
      - 'pyproject.toml'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NUM_CPUS: 1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: test PANORAMA on ${{ matrix.os }} with python ${{ matrix.python-version }}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python-version: ['3.9', '3.12']
    steps:

      # Get number of cpu available on the current runner
      - name: Get core number on linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          nb_cpu_linux=`nproc`
          echo "Number of cores available on the current linux runner $nb_cpu_linux"
          echo "NUM_CPUS=$nb_cpu_linux" >> "$GITHUB_ENV"

      - name: Get core number on macos
        if: matrix.os == 'macos-latest'
        run: |
          nb_cpu_macos=`sysctl -n hw.ncpu`
          echo "Number of cores avalaible on the current macos runner $nb_cpu_macos"
          echo "NUM_CPUS=$nb_cpu_macos" >> "$GITHUB_ENV"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Install requirements with miniconda
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,bioconda,defaults
          environment-file: panorama.yml
          activate-environment: panorama

      - name: Install panorama
        shell: bash -l {0}
        run: |
          pip install .[test]

      # Check that it is installed and displays help without error
      - name: Check that PANORAMA is installed
        shell: bash -l {0}
        run: |
          panorama --version
          panorama --help
      - name: Download test data
        uses: actions/checkout@v3
        with:
          repository: labgem/PANORAMA_test
          path: test_data
      - name: Run pytest with coverage
        shell: bash -l {0}
        run: |
          coverage run -m pytest --cov=panorama
      - name: Run panorama info
        shell: bash -l {0}
        run: |
          cd test_data
          panorama info -p pangenomes_list.tsv -o output --status  
          panorama info -p pangenomes_list.tsv -o output --status --content --disable-prog-bar --verbose 2
          cd -
      - name: Run panorama annotate, systems and write_systems 
        shell: bash -l {0}
        run: |
          cd test_data
          panorama utils --hmm hmms -o hmms_formatted/

          panorama annotation \
          --pangenomes pangenomes_list.tsv \
          --source defensefinder \
          --hmm hmms_formatted/hmm_list.tsv \
          --k_best_hit 3 \
          --output results/ \
          --threads $NUM_CPUS


          panorama utils --models models/* -o .  --force
          panorama systems \
          --pangenomes pangenomes_list.tsv \
          --models models_list.tsv \
          --source defensefinder \
          --annotation_sources  defensefinder \
          --threads $NUM_CPUS

          panorama write_systems  \
          --pangenomes pangenomes_list.tsv \
          --output write_systems_outdir \
          --models models_list.tsv \
          --sources defensefinder \
          --projection \
          --threads $NUM_CPUS   \
          --association all

          
          cd -  